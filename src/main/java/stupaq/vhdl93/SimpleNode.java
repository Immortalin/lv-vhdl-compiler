/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package stupaq.vhdl93;

import stupaq.parser.SymbolTable;

public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected VHDL93Parser parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(VHDL93Parser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /** Accept the visitor. **/
  public <Result, Argument, Failure extends Exception> Result jjtAccept(VHDL93ParserVisitor<Result, Argument, Failure> visitor, Argument data) throws Failure
  {
    return visitor.visit(this, data);
  }

  /** Accept the visitor. **/
  public <Argument, Failure extends Exception> Argument childrenAccept(VHDL93ParserVisitor<Argument, Argument, Failure> visitor, Argument data) throws Failure
  {
    if (children != null) {
      for (Node aChildren : children) {
        aChildren.jjtAccept(visitor, data);
      }
    }
    return data;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return VHDL93ParserTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (Node aChildren : children) {
        SimpleNode n = (SimpleNode) aChildren;
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }

  /** Customizations for {@link VHDL93Parser} compatibility. */

  // FIXME
  public static SymbolTable symtab;

  public void newBlock() {
    SymbolTable newSymtab = new SymbolTable();
    newSymtab.upperSymtab = symtab;
    symtab = newSymtab;
  }

  public void endBlock() {
    symtab = symtab.upperSymtab;
  }

  public void checkSemantics() {
  }

  public int getId() {
    return id;
  }
}

/* JavaCC - OriginalChecksum=34a52c465cdbbdf067f89d19009d3930 (do not edit this line) */
